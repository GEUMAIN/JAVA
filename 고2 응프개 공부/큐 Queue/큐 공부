package queue2;



import java.util.NoSuchElementException;



class Queue<T>{ //클래스 Queue

   

   class Node<T> { // 클래스 Node

       private T data;

       private Node<T> next;

       

       public Node(T data) {

           this.data = data;

       }

   }

   

   private Node<T> first;

   private Node<T> last;

   

   public void add(T item) { //데이터를 넣는 함수

       Node<T> t = new Node<T>(item);

       

       if (last != null) { //만약 앞선 데이터가 있다면

           last.next = t; //그 데이터와 연결

       }

       last = t; //포인터를 마지막으로 이동

       if (first == null) { //만약 데이터가 없다면

           first = last; //데이터를 마지막으로 연결

       }

   }

   

   public T remove() { //데이터 빼기

       if (first == null) { //데이터가 없다면

           throw new NoSuchElementException(); //오류처리

       }

       

       T data = first.data; //지울 데이터 저장

       first = first.next; //지웠으니 다음 데이터가 처음

       

       if (first == null) { //데이터가 없다면

           last = null; //마지막도 null값

       }

       return data;

   

   }

   public T peek() {

       if (first == null) { //데이터가 없으면

           throw new NoSuchElementException(); //오류 처리

       }

       return first.data; //있다면 데이터의 정보 return

   }

   

   public boolean isEmpty() { //비었는지 확인

       return first == null;

   }

}





public class queue3 {

   public static void main(String[] args) {

       Queue<Integer> q = new Queue<Integer>();

       q.add(1);

       q.add(2);

       q.add(3);

       q.add(4);

       System.out.println(q.remove());

       System.out.println(q.remove());

       System.out.println(q.peek());

       System.out.println(q.remove());

       System.out.println(q.isEmpty());

       System.out.println(q.remove());

       System.out.println(q.isEmpty());

   }

}
